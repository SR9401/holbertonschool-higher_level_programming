"""
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# === ✅ Cas valides ===
>>> bg.integer_validator("age", 1)
>>> bg.integer_validator("width", 999999999999999)
>>> bg.integer_validator("zeroedge", 1)

# === ❌ Cas de valeurs interdites ===
>>> bg.integer_validator("size", 0)
Traceback (most recent call last):
...
ValueError: size must be greater than 0

>>> bg.integer_validator("age", -5)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

# === ❌ Cas de type incorrect ===
>>> bg.integer_validator("height", "10")
Traceback (most recent call last):
...
TypeError: height must be an integer

>>> bg.integer_validator("thickness", 3.14)
Traceback (most recent call last):
...
TypeError: thickness must be an integer

>>> bg.integer_validator("active", True)
Traceback (most recent call last):
...
TypeError: active must be an integer

>>> bg.integer_validator("items", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: items must be an integer

>>> bg.integer_validator("config", {"key": "value"})
Traceback (most recent call last):
...
TypeError: config must be an integer

>>> bg.integer_validator("data", None)
Traceback (most recent call last):
...
TypeError: data must be an integer

>>> bg.integer_validator("float_cast", float(10))
Traceback (most recent call last):
...
TypeError: float_cast must be an integer

# === Autres cas bizarres mais utiles ===

>>> bg.integer_validator("bool_false", False)
Traceback (most recent call last):
...
TypeError: bool_false must be an integer

>>> bg.integer_validator("t@il#$", 4)
>>> bg.integer_validator("", 8)

>>> class Dummy: pass
>>> bg.integer_validator("dummy", Dummy())
Traceback (most recent call last):
...
TypeError: dummy must be an integer
"""
